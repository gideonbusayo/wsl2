name: Deploy WSL Image

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Install and Configure Azure Modules
      shell: powershell
      run: |
        # Install AzureAD and IntuneWin32App modules
        Install-Module -Name AzureAD -Scope CurrentUser -Force -AllowClobber
        Install-Module -Name IntuneWin32App -Scope CurrentUser -Force -ErrorAction Stop

        # Login to Azure CLI using service principal
        $creds = '${{ secrets.AZURE_CREDENTIALS }}' | ConvertFrom-Json
        $securePassword = ConvertTo-SecureString $creds.clientSecret -AsPlainText -Force
        $psCredential = New-Object System.Management.Automation.PSCredential ($creds.clientId, $securePassword)
        az login --service-principal -u $creds.clientId -p $securePassword -t $creds.tenantId

        # Application properties
        $appFilePath = ".\exported.intunewin"
        $appName = "Ubuntu-Custom"
        $appDescription = "Custom Ubuntu WSL Image"
        $appPublisher = "DEVOPS-LSEG"
        $installCommand = "wsl --import Ubuntu C:\WSL\Ubuntu .\exported.tar"   
        $uninstallCommand = "wsl --unregister Ubuntu"

        # Detection Rule
        $detectionRule = New-Object 'System.Collections.Specialized.OrderedDictionary'
        $detectionRule['detectionType'] = 'file'
        $detectionRule['path'] = "C:\\Program Files\\WSL"
        $detectionRule['fileName'] = "wsl.exe"
        $detectionRule['check32BitOn64System'] = $false
        $detectionRules = @($detectionRule)

        # Upload the package to Intune
        try {
            $intuneApp = @{
                displayName = $appName
                description = $appDescription
                publisher = $appPublisher
                installCommandLine = $installCommand
                uninstallCommandLine = $uninstallCommand
                DetectionRule = $detectionRules
                InstallExperience = "system"
                RestartBehavior = "basedOnReturnCode"
            }

            Add-IntuneWin32App @intuneApp -FilePath $appFilePath -ErrorAction Stop
        } catch {
            Write-Error "Error uploading the package to Intune: $_"
            exit 1
        }
